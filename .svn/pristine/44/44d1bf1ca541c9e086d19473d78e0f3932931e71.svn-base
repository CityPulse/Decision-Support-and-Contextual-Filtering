/*******************************************************************************
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2015 Stefano Germano - Insight Centre for Data Analytics NUIG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *******************************************************************************/
package org.insight_centre.urq.citypulse.wp5.contextual_filter.mockup;

import java.util.logging.Logger;

import javax.websocket.CloseReason;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import org.insight_centre.urq.citypulse.wp5.contextual_filter.contextual_event_system.ContextualEventFilter;

import citypulse.commons.contextual_events_request.ContextualEvent;
import citypulse.commons.contextual_filtering.contextual_event_request.ContextualEventRequest;
import citypulse.commons.contextual_filtering.contextual_event_request.Place;
import citypulse.commons.contextual_filtering.contextual_event_request.PlaceAdapter;
import citypulse.commons.contextual_filtering.user_context_ontology.UserGPSCoordinate;
import citypulse.commons.data.Coordinate;
import citypulse.commons.data.CoordinateParseException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * @author Stefano Germano, Thu-Le Pham
 *
 */
@ServerEndpoint(value = "/contextual_events_request")
public class ContextualEventsRequestEndpointMockup {

	public static Logger Log = Logger
			.getLogger(ContextualEventsRequestEndpointMockup.class.getPackage()
					.getName());
	/*
	 *
	 */
	private ContextualEventFilter cf;

	/**
	 *
	 */
	public ContextualEventsRequestEndpointMockup() {
	}

	/**
	 * @param session
	 * @param closeReason
	 */
	@OnClose
	public void onClose(final Session session, final CloseReason closeReason) {
		Log.info(String.format("Session %s closed because of %s",
				session.getId(), closeReason));
		// cf.stopSubcribeEvents();
		// cf = null;
	}

	/**
	 * @param session
	 * @param t
	 */
	@OnError
	public void onError(final Session session, final Throwable t) {
		Log.severe(t.getMessage());
	}

	/**
	 * @param message
	 * @param session
	 * @return
	 * @throws CoordinateParseException
	 */
	@OnMessage
	public synchronized void onMessage(final String message,
			final Session session) throws CoordinateParseException {
		Log.info("Received message: " + message);
		// 1 user has only 1 connection to ContextualEventsRequestEndpointMockup
		// 1 user can send different types of message such as:
		// ContextualEventRequest, (GPS)Coordinate
		if (message.contains("ContextualEventRequest")) {
			// received contextual_event_request
			final ContextualEventRequest ceRequest = parse(message);
			if (cf != null) {
				final ContextualEvent event = new ContextualEvent();
				event.setCeName("....");
				event.setCeType("TrafficJam");
				event.setCeLevel(1);
				event.setCeWeight(1);
				session.getAsyncRemote().sendText(new Gson().toJson(event));

				// cf.startCEF(ceRequest);
			} else {
				Log.info("The Contextual Filter is null!");
			}
		} else if (message.contains("UserGPSCoordinate")) {
			// received user's coordinate
			final Coordinate userCoor = (new Gson().fromJson(message,
					UserGPSCoordinate.class)).getUserCoordinate();
			if (cf != null) {
				cf.receiveUserGPSCoordinate(userCoor);
			} else {
				Log.info("The Contextual Filter is null!");
			}

		}
	}

	/**
	 * @param session
	 */
	@OnOpen
	public void onOpen(final Session session) {
		Log.info("Connected ... " + session.getId());
		cf = new ContextualEventFilter(session);
	}

	/**
	 * This function parses message from String to ContextualEventRequest
	 *
	 * @param message
	 * @return ContextualEventRequest
	 */
	private ContextualEventRequest parse(final String message) {

		final GsonBuilder builder = new GsonBuilder();
		builder.registerTypeAdapter(Place.class, new PlaceAdapter());
		final Gson gson = builder.create();
		final ContextualEventRequest ceRequest =  gson.fromJson(message, ContextualEventRequest.class);
		Log.info("After parsing = " + ceRequest.toString());
		return ceRequest;
	}
}
