package org.insight_centre.urq.citypulse.wp5.contextual_filter.test;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.logging.Logger;

import org.insight_centre.urq.citypulse.wp5.contextual_filter.engine.ContextualFilter;

import citypulse.commons.contextual_events_request.ContextualEvent;
import citypulse.commons.data.Coordinate;
import citypulse.commons.reasoning_request.concrete.AnswerTravelPlanner;

public class EventStream implements Runnable {
	public static Logger logger = Logger.getLogger(EventStream.class
			.getPackage().getName());

	public static List<String[]> eventTypes = readFile("res/cf/data/"
			+ "TrafficEvents.csv");
	// public static List<String[]> eventTypes = readFile(Constants.dataURI
	// + "TrafficEvents.csv");

	private final ContextualFilter cf;
	boolean stop = false;
	long sleep = 10;

	public EventStream(ContextualFilter cf) {
		this.cf = cf;

	}

	public void stop() {
		stop = true;
		logger.info("Stopping event stream.");
	}


	@Override
	public void run() {
		logger.info("START EVENT STREAM ");
		int i = 0;
		while (i < 10) {
			final List<ContextualEvent> events = this.generateEvents();
			logger.info("Received events: " + events.toString());
			cf.receiveContextualEvents(events);
			try {
				Thread.sleep(500);
			} catch (final InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			i++;
		}
	}

	public static List<String[]> readFile(String txtFile) {
		final List<String[]> eventTypes = new ArrayList<String[]>();
		BufferedReader br = null;
		String line = "";
		try {
			br = new BufferedReader(new FileReader(txtFile));
			br.readLine();
			while ((line = br.readLine()) != null) {
				final String[] temp = line.split(",");
				eventTypes.add(temp);
			}

		} catch (final FileNotFoundException e) {
			e.printStackTrace();
		} catch (final IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (final IOException e) {
					e.printStackTrace();
				}
			}
		}

		return eventTypes;
	}

	public List<ContextualEvent> generateEvents() {
		final List<Coordinate> path = ((AnswerTravelPlanner) cf.getAnswer())
				.getRoute();
		final List<ContextualEvent> unexpectedEvents = new ArrayList();
		final long currentTime = System.currentTimeMillis();
		final Random r = new Random();
		final int numberofevents = r.nextInt(10);

		final int size = this.eventTypes.size();
		final int pathSize = path.size();

		while (unexpectedEvents.size() != numberofevents) {

			final int index = r.nextInt(size);
			if (index >= 0 && index < size) {
				final String[] temp = this.eventTypes.get(index);
				final int indexNode = r.nextInt(pathSize);
				if (indexNode >= 0 && indexNode < pathSize) {
					final Coordinate node = path.get(indexNode);
					final String eId = "id" + UUID.randomUUID().toString();
					final ContextualEvent e = new ContextualEvent(eId.replace(
							"-", "_"), temp[0].replace("-", "_"),
							temp[1].replace("-", "_"),
							System.currentTimeMillis(), node, 1);
					if (!unexpectedEvents.contains(e)) {
						unexpectedEvents.add(e);
					}
				}
			}
		}
		return unexpectedEvents;
	}
}
