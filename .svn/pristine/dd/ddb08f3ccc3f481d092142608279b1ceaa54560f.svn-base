/*******************************************************************************
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2015 Stefano Germano - Insight Centre for Data Analytics NUIG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *******************************************************************************/
package org.insight_centre.urq.citypulse.wp5.contextual_filter.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import javax.websocket.ClientEndpointConfig;
import javax.websocket.Endpoint;
import javax.websocket.EndpointConfig;
import javax.websocket.MessageHandler;
import javax.websocket.Session;

import org.glassfish.tyrus.client.ClientManager;
import org.insight_centre.urq.citypulse.wp5.Configuration;

import citypulse.commons.contextual_events_request.ContextualEventRequest;
import citypulse.commons.reasoning_request.Answer;
import citypulse.commons.reasoning_request.concrete.AnswerAdapter;
import citypulse.commons.reasoning_request.concrete.FunctionalConstraintValueAdapter;
import citypulse.commons.reasoning_request.concrete.FunctionalParameterValueAdapter;
import citypulse.commons.reasoning_request.functional_requirements.FunctionalConstraintValue;
import citypulse.commons.reasoning_request.functional_requirements.FunctionalParameterValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * @author Stefano Germano
 *
 */
public class ApplicationClient {

	/**
	 *
	 */
	private static CountDownLatch messageLatch;

	/**
	 *
	 */
	private static final String SENT_MESSAGE_TRAVEL_PLANNER = readContextualEventRequest(Configuration
			.getInstance().getCFResourceFolderPath()
			+ "data"
			+ File.separator
			+ "ContextualEventRequest_TravelPlanner.txt");

	private static final String SENT_MESSAGE_PARKING_SPACES = "{\"answer\":\"{\"position\":{\"latitude\":56.15441,\"longitude\":10.20818},\"availablePS\":1,\"walking_distance\":1198,\"arType\":\"PARKING_SPACES\"}\",\"reasoningRequest\":{\"arType\":\"PARKING_SPACES\",\"functionalDetails\":{\"functionalConstraints\":{\"functionalConstraints\":[{\"name\":\"COST\",\"operator\":\"LESS_THAN\",\"value\":\"100\"}]},"
			+ "\"functionalParameters\":{\"functionalParameters\":[{\"name\":\"DISTANCE_RANGE\",\"value\":\"1000\"},{\"name\":\"TIME_OF_STAY\",\"value\":\"100\"},"
			+ "{\"name\":\"STARTING_DATETIME\",\"value\":\"1434229479925\"},{\"name\":\"POINT_OF_INTEREST\",\"value\":\"10.203921 56.162939\"},"
			+ "{\"name\":\"STARTING_POINT\",\"value\":\"10.196690820157528 56.141052386643906\"}]},\"functionalPreferences\":{\"functionalPreferences\":[{\"operation\":\"MINIMIZE\",\"value\":\"DISTANCE\",\"order\":2},"
			+ "{\"operation\":\"MINIMIZE\",\"value\":\"COST\",\"order\":1}]}},\"user\":{}}}";

	/**
	 * @param args
	 */
	public static void main(final String[] args) {

		try {

			// System.out.println("SENT_MESSAGE_TRAVEL_PLANNER = "
			// + SENT_MESSAGE_TRAVEL_PLANNER);
			ApplicationClient.messageLatch = new CountDownLatch(2);

			final ClientEndpointConfig cec = ClientEndpointConfig.Builder
					.create().build();

			final ClientManager client = ClientManager.createClient();
			client.connectToServer(new Endpoint() {

				@Override
				public void onOpen(final Session session,
						final EndpointConfig config) {
					try {
						session.addMessageHandler(new MessageHandler.Whole<String>() {
							@Override
							public void onMessage(final String message) {
								System.out.println("Received message: "
										+ message);

								final ContextualEventRequest request = parse(message);
								// ApplicationClient.messageLatch.countDown();
							}
						});
						session.getBasicRemote().sendText(
								ApplicationClient.SENT_MESSAGE_TRAVEL_PLANNER);
						// session.getBasicRemote().sendText(
						// ApplicationClient.SENT_MESSAGE_PARKING_SPACES);
					} catch (final IOException e) {
						e.printStackTrace();
					}
				}
//			}, cec, new URI("ws://" + "131.227.92.55"+ ":"
			}, cec, new URI("ws://"
					+ "localhost"
					+ ":"// + "2353"
					+ Configuration.getInstance().getPort()
					+ Configuration.getInstance().getRootPath()
					+ "/contextual_events_request"));
			ApplicationClient.messageLatch.await(100, TimeUnit.SECONDS);
		} catch (final Exception e) {
			e.printStackTrace();
		}

	}

	public static String readContextualEventRequest(String file){

		String everything="";
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			final StringBuilder sb = new StringBuilder();
			String line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append(System.lineSeparator());
				line = br.readLine();
			}
			everything = sb.toString();
		} catch (final IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (final IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return everything;
	}

	public static ContextualEventRequest parse(final String message) {
		// parse abstract class in ReasoningRequest
		final GsonBuilder builder = new GsonBuilder();
		// builder.registerTypeAdapter(ContextualEventRequest.class,
		// new TestAdapter());
		builder.registerTypeAdapter(FunctionalParameterValue.class,
				new FunctionalParameterValueAdapter());
		builder.registerTypeAdapter(FunctionalConstraintValue.class,
				new FunctionalConstraintValueAdapter());
		// TODO: parse answer based on scenario
		builder.registerTypeAdapter(Answer.class, new AnswerAdapter());

		final Gson gson = builder.create();
		return gson.fromJson(message, ContextualEventRequest.class);
	}

}
