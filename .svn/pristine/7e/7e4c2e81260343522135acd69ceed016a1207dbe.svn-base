/**
 *
 */
package org.insight_centre.urq.citypulse.wp5.contextual_filter.contextual_event_system;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.insight_centre.urq.citypulse.wp5.Configuration;

import citypulse.commons.contextual_filtering.city_event_ontology.CityEvent;
import citypulse.commons.contextual_filtering.contextual_event_request.Place;
import citypulse.commons.contextual_filtering.contextual_event_request.PlaceAdapter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.rabbitmq.client.AMQP.BasicProperties;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.Envelope;
import com.rabbitmq.client.ShutdownSignalException;
/**
 * @author Thu-Le Pham
 * @date 1 Oct 2015
 */
public class CityEventConsumer implements Consumer {

	public static Logger logger = Logger.getLogger(CityEventConsumer.class
			.getPackage().getName());

	/**
	 *
	 */
	Connection connection;

	/**
	 *
	 */
	Channel channel;

	/**
	 *
	 */
	List<String[]> exchangeTopics;

	/**
	 *
	 */
	ContextualEventFilter ceFilter;

	/**
	 *
	 */
	String consumerTag;

	/**
	 *
	 * @param exchangeTopics
	 */
	public CityEventConsumer(List<String[]> exchangeTopics,
			ContextualEventFilter ceFilter) {
		super();
		this.exchangeTopics = exchangeTopics;
		this.ceFilter = ceFilter;

		// Create a connection factoryßß
		final ConnectionFactory factory = new ConnectionFactory();

		// Replace with the correct connection uri
		// final String uri = Configuration.getInstance().getEventRabbitURI();

		// final String uri = "amqp://guest:guest@127.0.0.1:5672";
		final String uri = Configuration.getInstance().getEventRabbitURI();
		try {
			factory.setUri(uri);
			// factory.setHost("localhost");
			// getting a connection
			connection = factory.newConnection();

			// creating a channel
			channel = connection.createChannel();
			logger.info("Consumer opened a connection");

			final String queueName = channel.queueDeclare().getQueue();
			// channel.queueBind(queueName, "events",
			// "31dd6e16-c272-564f-a744-1da1f0011ca6");
			// channel.basicConsume(queueName, true, this);

			for (int i = 0; i < this.exchangeTopics.size(); i++) {
				final String[] temp = this.exchangeTopics.get(i);
				final String exchange = temp[0];
				final String topic = temp[1];
				logger.info("exchange topics = "
						+ this.exchangeTopics.get(i)[0] + "--"
						+ this.exchangeTopics.get(i)[1]);
				channel.queueBind(queueName, exchange, topic);

			}
			this.consumerTag = channel.basicConsume(queueName, true, this);
			logger.info("Start consumming city events");
		} catch (final Exception e) {
			logger.severe("Error connecting to MQ Server." + e.toString());
		}

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleConsumeOk(java.lang.String)
	 */
	@Override
	public void handleConsumeOk(String consumerTag) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleCancelOk(java.lang.String)
	 */
	@Override
	public void handleCancelOk(String consumerTag) {
		try {
			this.connection.close();
			logger.info("Consumer closed");
		} catch (final IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleCancel(java.lang.String)
	 */
	@Override
	public void handleCancel(String consumerTag) throws IOException {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleDelivery(java.lang.String,
	 * com.rabbitmq.client.Envelope, com.rabbitmq.client.AMQP.BasicProperties,
	 * byte[])
	 */
	@Override
	public void handleDelivery(String arg0, Envelope arg1,
			BasicProperties arg2, byte[] arg3) throws IOException {
		final String msgBody = new String(arg3);
		logger.info("Received message  = " + msgBody + "\n");

		final CityEvent cityEvent = parse(msgBody);
		// TODO:consume events,will implement window here
		final List<CityEvent> cityEvents = new ArrayList<CityEvent>();
		cityEvents.add(cityEvent);
		ceFilter.performReasoning(cityEvents);
	}

	/**
	 *
	 * @param message
	 * @return
	 */
	public CityEvent parse(String message) {
		final GsonBuilder builder = new GsonBuilder();
		builder.registerTypeAdapter(Place.class, new PlaceAdapter());
		final Gson gson = builder.create();
		return gson.fromJson(message, CityEvent.class);
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleShutdownSignal(java.lang.String,
	 * com.rabbitmq.client.ShutdownSignalException)
	 */
	@Override
	public void handleShutdownSignal(String consumerTag,
			ShutdownSignalException sig) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.rabbitmq.client.Consumer#handleRecoverOk(java.lang.String)
	 */
	@Override
	public void handleRecoverOk(String consumerTag) {
		// TODO Auto-generated method stub

	}

}
